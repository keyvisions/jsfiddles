class kvParams extends HTMLElement{static observedAttributes=["schema","lang","mode","um","sheet","src"];static#e={type:{en:"Type",it:"Tipo"},label:{en:"Label",it:"Etichetta"},um:{en:"U.M.",it:"U.M."},flags:{en:"Attributes",it:"Attributi"},number:{en:"Number",it:"Numero"},text:{en:"Text",it:"Testo"},date:{en:"Date",it:"Data"},select:{en:"Selection",it:"Selezione"},checkbox:{en:"Checkbox",it:"Checkbox"},textarea:{en:"Notes",it:"Note"},group:{en:"Group",it:"Gruppo"},separator:{en:"Line",it:"Linea"},delete:{en:"You sure you want to delete the paramter?",it:"Sicuri di voler eliminare il parametro?"},optionless:{en:"This parameter has not options",it:"Questo parametro non prevede opzioni"},norange:{en:"There are no parameters that require a range",it:"Non ci sono parametri che richiedono un intervallo"}};static#t=[{en:"Described",it:"Descrittivo",icon:"fas fa-fw fa-font"},{en:"Searched",it:"Ricercabile",icon:"fas fa-fw fa-search"},{en:"Sampled",it:"Campionato",icon:"fas fa-fw fa-code-branch"},{en:"Imported",it:"Importato",icon:"fas fa-fw fa-file-download"},{en:"Technical sheet",it:"Dati tecnici",icon:"fas fa-fw fa-drafting-compass"},{en:"Sales sheet",it:"Dati commerciali",icon:"fas fa-fw fa-book-open"},{en:"Production sheet",it:"Dati produttivi",icon:"fas fa-fw fa-tools"},{en:"Test sheet",it:"Dati collaudo",icon:"fas fa-fw fa-tachometer-alt"},{en:"Logistics sheet",it:"Dati logistici",icon:"fas fa-fw fa-truck-loading"},{en:"Plate",it:"Dati Targa",icon:"fas fa-fw fa-qrcode"},{en:"Required",it:"Obbligatorio",icon:"fas fa-fw fa-exclamation"}];Lang="en";UM="msu";Schema=[];Data={};constructor(){super(),this.Schema=JSON.parse(this.innerText||"[]"),this.addEventListener("mouseup",(e=>{const t=e.target;if(t.closest("tbody")?.querySelector(".selected")?.classList.remove("selected"),t.closest("tr")?.classList.add("selected"),t.classList.contains("add")){this.#a(t.closest("tr")).scrollIntoView({block:"nearest"})}else if(t.classList.contains("remove")&&1!=t.closest("tbody")?.children.length&&(e.ctrlKey||confirm(kvParams.#e.delete[this.Lang])))t.closest("tr").remove();else if("flags"==t.getAttribute("name")){t.classList.toggle("deselected");const e=parseInt(t.closest("td").firstElementChild.value);t.closest("td").firstElementChild.value=t.classList.contains("deselected")?e&~(1<<t.getAttribute("value")):e|1<<t.getAttribute("value")}else if("manageOptions"==t.name)this.#s(e);else if(t.classList.contains("range")){const e="["+(t.form.min.value||"null")+","+(t.form.max.value||"null")+","+(t.form.decimals.value||"null")+","+t.form.NA.checked+"]";t.options.value=e,t.closest("dialog").remove()}else t.classList.contains("options")&&t.closest("dialog").remove()}));let e=this;for(;e&&!e.lang;)e=e.parentElement;this.Lang=kvParams.#t[0][e.lang]?e.lang.substring(0,2):"en"}async#l(e){0==this.Schema.length&&await fetch(e).then((e=>e.json())).then((e=>this.Schema=e||[])).catch((()=>this.Schema=[]))}async attributeChangedCallback(e,t,a){if(t!=a){switch(e){case"lang":this.Lang=a;break;case"um":this.UM=a;break;case"schema":kvParams.Parameters=[],await this.#l(a)}switch("mode"!=e&&(e="mode",a=this.getAttribute("mode")),this.innerHTML="",a){case"manage":this.#i();break;case"edit":this.#n(!0);break;default:this.#n(!1)}}}#i(){const e=`<input type="hidden" name="${this.getAttribute("name")}"><table id="kv-params"><thead><tr><th></th><th>${kvParams.#e.type[this.Lang]}</th><th style="width:100%">${kvParams.#e.label[this.Lang]}</th><th>${kvParams.#e.um[this.Lang]}</th><th></th><th style="white-space:nowrap">${kvParams.#t.map((e=>`<i class="${e.icon}" title="${e[this.Lang]}"></i>`)).join(" ")}</th><th></th></tr></thead><tbody><tr><td style="white-space:nowrap"><input form="kv-params" type="hidden" name="id"><i class="fas fa-grip-vertical"></i></td><td><select form="kv-params" title="Type" name="type"><option value="number">${kvParams.#e.number[this.Lang]}</option><option value="text">${kvParams.#e.text[this.Lang]}</option><option value="date">${kvParams.#e.date[this.Lang]}</option><option value="select">${kvParams.#e.select[this.Lang]}</option><option value="checkbox">${kvParams.#e.checkbox[this.Lang]}</option><option value="textarea">${kvParams.#e.textarea[this.Lang]}</option><option value="group">${kvParams.#e.group[this.Lang]}</option><option value="separator">${kvParams.#e.separator[this.Lang]}</option></select></td><td><input form="kv-params" name="label" title="Label" data-value style="width: -webkit-fill-available"></td><td><select form="kv-params" name="um" title="UM"><option></option>`+UMS.map((e=>`<option value="${e.id}">${e.msu} ${e.isu?.replace(/(.*)/," [$1]")||""}</option>`)).join("")+'</select></td><td><input form="kv-params" type="hidden" name="options"><button name="manageOptions">...</button></td><td style="white-space:nowrap"><input form="kv-params" type="hidden" name="flags">'+kvParams.#t.map(((e,t)=>`<i class="${e.icon}" name="flags" value="${t}" title="${e[this.Lang]}"></i>`)).join(" ")+'</td><td style="white-space:nowrap"><i class="far fa-trash-alt remove"></i> <i class="fas fa-plus add"></i></td></tr></body></table>';this.insertAdjacentHTML("afterbegin",e),this.Schema.forEach((e=>{const t=this.#a(this.querySelector("tbody tr:last-child"));t.querySelectorAll("input,select").forEach((a=>{if("label"==a.name)a.dataset.value=JSON.stringify(e.label),a.value=e.label[this.Lang];else if("flags"==a.name){a.value=e.flags;for(let a=0;a<kvParams.#t.length;++a)e.flags&1<<a?t.querySelector(`i[name="flags"][value="${a}"]`).classList.remove("deselected"):t.querySelector(`i[name="flags"][value="${a}"]`).classList.add("deselected")}else"checkbox"==a.type?a.checked=0!=(e[a.name]&1<<parseInt(a.value)):a.value=e[a.name]}))})),this.Schema.length>0&&this.querySelector("tbody tr").remove(),this.firstElementChild.value=JSON.stringify(this.Schema),this.scrollIntoView({block:"nearest"})}#a(e){const t=e.cloneNode(!0);return t.querySelector("input[name=id]").value="",e.insertAdjacentElement("afterend",t),t}#s(e){const t=e.target.closest("tr"),a=this.#o(UMS,t.querySelector("[name=um]").value);t.closest("tbody").querySelector(".selected")?.classList.remove("selected"),t.closest("tbody").classList.add("selected"),t.classList.add("selected");let s,l="";switch(t.querySelector("[name=type]").value){case"number":try{s=JSON.parse(t.querySelector("[name=options]").value||"[null,null,null,false]")}catch{s=[null,null,null,!1]}l=`<dialog id="kv-params-dialog" onkeydown="if (event.key=='Escape') this.close()" onclose="this.remove()"><header onclick="this.closest('dialog').close()">${t.querySelector("[name=label]").value} (${a.msu})</header><form><label><span>Min</span> <input type="number" name="min" step="any" value="${s[0]}"></label><label><span>Max</span> <input type="number" name="max" step="any" value="${s[1]}"></label><label><span>Decimals</span> <input type="number" name="decimals" min="0" max="5" step="1" value="${s[2]}"></label><p style="margin:0.5rem 0"><label><input type="checkbox" name="flag" ${s[3]?"checked":""}> Allow Not applicable (NA)</label></p><button type="button" class="range" id="kv-params-options" style="float:right">Save</button></form></dialog>`;break;case"select":try{s=JSON.parse(t.querySelector("[name=options]").value||'["", "", false]')}catch{s=[t.querySelector("[name=options]").value,"",!1]}l=`<dialog id="kv-params-dialog" onkeydown="if (event.key=='Escape') this.close()" onclose="this.remove()"><header onclick="this.closest('dialog').close()">${t.querySelector("[name=label]").value}</header><form><div style="display:flex; gap:1em;"><label><span>${a?.msu||"en"}</span> <textarea name="options" rows="10">${s[0].replaceAll(",","\n")}</textarea></label><label class="IT${s[2]?"":" hide"}"><span>${a?.isu||"it"}</span> <textarea name="options" rows="10">${s[1].replaceAll(",","\n")}</textarea></label></div>`+(null!=a?"":`<p style="margin:0.5rem 0"><label><input type="checkbox" name="flag" ${s[2]?"checked":""} onclick="this.closest('dialog').querySelector('.IT').classList.toggle('hide')"> Multilingual</label></p>`)+'<button type="button" class="options" id="kv-params-options" style="float:right">Save</button></form></dialog>';break;default:return void alert(kvParams.#e.optionless[this.Lang])}l&&(this.insertAdjacentHTML("beforeend",l),document.getElementById("kv-params-options").options=t.querySelector("[name=options]"),document.getElementById("kv-params-dialog").showModal())}#n(e=!1){const t=parseInt(this.getAttribute("sheet"))||5;let a=`<h2><i class="${kvParams.#t[t].icon}"></i> ${kvParams.#t[t][this.Lang]}</h2><div>`,s=!1;function l(e){return`name="P${e.id}" ${0==(1024&e.flags)?"":"required"}`}this.Schema.forEach((i=>{const n=this.#o(UMS,i.um),o=i.um?"["+(n[e?"msu":this.UM]||n.msu)+"]":"",r=("msu"!=this.UM?n.convert(this.Data[`P${i.id}`]):this.Data[`P${i.id}`])||"";if(i.flags&1<<t)if(!e||Object.keys(this.Data).length)switch(i.type){case"number":a+=`<label><span>${i.label[this.Lang]} ${o}</span><input type="number" ${l(i)} value="${r}"></label>`;break;case"date":a+=`<label><span>${i.label[this.Lang]}</span><input type="date" ${l(i)} value="${r}"></label>`;break;case"checkbox":a+=`<label><input type="checkbox" ${l(i)} ${r?"checked":""}"> ${i.label[this.Lang]}</label>`;break;case"select":a+=`<label><span>${i.label[this.Lang]} ${o}</span><select ${l(i)} value="${r}">${i.options.split(",").map((e=>`<option>${e}</option>`))}</select></label>`;break;case"textarea":a+=`<label class="full-width"><span>${i.label[this.Lang]} ${i.um?`[${i.um}]`:""}</span><textarea ${l(i)}>${r}</textarea></label>`;break;case"separator":a+='<hr class="full-width">';break;case"group":""!=i.label[this.Lang]?(a+=`${s?"</fieldset>":""}<fieldset class="full-width"><legend>${i.label[this.Lang]}</legend>`,s=!0):a+='<hr class="full-width">';break;default:a+=`<label><span>${i.label[this.Lang]} ${o}</span><input type="${i.type}" ${l(i)} value="${r}"></label>`}else"number"==i.type&&o&&(a+=`<label><span>${i.label[this.Lang]} [${this.#o(UMS,i.um).msu}]</span>[<input type="number" name="Pm${i.id}" step="any" placeholder="min">, <input type="number" name="PM${i.id}" step="any" placeholder="max">]</label>`)})),a+=(s?"</fieldset>":"")+"</div>",this.insertAdjacentHTML("afterbegin",a),e||this.querySelectorAll("input, select, textarea").forEach((e=>e.setAttribute("disabled","")))}#o(e,t){return e.find((e=>e.id==t))}save(){return this.Schema=[],this.querySelectorAll("tbody tr").forEach((e=>{const t={};e.querySelectorAll("input,select").forEach((e=>{"checkbox"==e.type?t[e.name]|=e.checked?1<<parseInt(e.value):0:"number"==e.type?t[e.name]=parseFloat(e.value):e.hasAttribute("data-value")?(t[e.name]=JSON.parse(e.dataset.value||'{"en":null,"it":null}'),t[e.name][this.Lang]=e.value):t[e.name]=e.value})),this.Schema.push(t)})),this.firstElementChild.value=JSON.stringify(this.Schema),this.firstElementChild.value}search(){}}customElements.define("kv-params",kvParams);